components:
  schemas:
    Body_login_user_login_post:
      properties:
        client_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Client Id
        client_secret:
          anyOf:
          - type: string
          - type: 'null'
          title: Client Secret
        grant_type:
          anyOf:
          - pattern: password
            type: string
          - type: 'null'
          title: Grant Type
        password:
          title: Password
          type: string
        scope:
          default: ''
          title: Scope
          type: string
        username:
          title: Username
          type: string
      required:
      - username
      - password
      title: Body_login_user_login_post
      type: object
    Book:
      properties:
        author:
          description: The author of the book
          example: F. Scott Fitzgerald
          title: Author
          type: string
        bookId:
          description: The unique ID of the book
          example: abc123
          title: Bookid
          type: string
        description:
          description: A brief description of the book
          example: A classic novel about the American Dream.
          title: Description
          type: string
        genre:
          description: The genre of the book
          example: Fiction
          title: Genre
          type: string
        price:
          description: The price of the book
          example: 15.99
          title: Price
          type: number
        rating:
          anyOf:
          - type: number
          - type: 'null'
          description: The rating of the book
          example: 4.5
          title: Rating
        stock:
          description: The available stock of the book
          example: 50
          title: Stock
          type: integer
        title:
          description: The title of the book
          example: The Great Gatsby
          title: Title
          type: string
      required:
      - bookId
      - title
      - author
      - genre
      - price
      - description
      - stock
      title: Book
      type: object
    BookRequest:
      properties:
        author:
          description: The author of the book
          example: F. Scott Fitzgerald
          title: Author
          type: string
        description:
          description: A brief description of the book
          example: A classic novel about the American Dream.
          title: Description
          type: string
        genre:
          description: The genre of the book
          example: Fiction
          title: Genre
          type: string
        price:
          description: The price of the book
          example: 15.99
          title: Price
          type: number
        stock:
          description: The available stock of the book
          example: 50
          title: Stock
          type: integer
        title:
          description: The title of the book
          example: The Great Gatsby
          title: Title
          type: string
      required:
      - title
      - author
      - genre
      - price
      - description
      - stock
      title: BookRequest
      type: object
    Cart:
      properties:
        items:
          description: List of items in the cart
          items:
            $ref: '#/components/schemas/CartItem'
          title: Items
          type: array
        totalPrice:
          description: The total price of the items in the cart
          example: 31.98
          title: Totalprice
          type: number
      required:
      - items
      - totalPrice
      title: Cart
      type: object
    CartItem:
      properties:
        bookId:
          description: The unique ID of the book
          example: abc123
          title: Bookid
          type: string
        quantity:
          description: The quantity of the book in the cart
          example: 2
          title: Quantity
          type: integer
      required:
      - bookId
      - quantity
      title: CartItem
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    UpdateUserRequest:
      properties:
        email:
          anyOf:
          - format: email
            type: string
          - type: 'null'
          description: Updated email of the user
          title: Email
        name:
          anyOf:
          - type: string
          - type: 'null'
          description: Updated name of the user
          title: Name
        password:
          anyOf:
          - type: string
          - type: 'null'
          description: Updated password of the user
          title: Password
      title: UpdateUserRequest
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
  securitySchemes:
    OAuth2PasswordBearer:
      flows:
        password:
          scopes: {}
          tokenUrl: login
      type: oauth2
info:
  description: Description
  title: Online-BookStore
  version: '1.0'
openapi: 3.1.0
paths:
  /:
    get:
      operationId: root__get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Root
  /books:
    get:
      description: Retrieve a list of books.
      operationId: retrieve_books_books_get
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Retrieve Books Books Get
                type: object
          description: Successful Response
      summary: Retrieve Books
      tags:
      - books
    post:
      description: "Add a new book to the store.\n\nExample Request:\n{\n    \"title\"\
        : \"The Great Gatsby\",\n    \"author\": \"F. Scott Fitzgerald\",\n    \"\
        genre\": \"Fiction\",\n    \"price\": 15.99,\n    \"description\": \"A classic\
        \ novel about the American Dream.\",\n    \"stock\": 50\n}"
      operationId: add_book_books_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Add Book
      tags:
      - books
  /books/{bookId}:
    delete:
      description: "Delete a book.\n\nPath Parameter:\n- `bookId`: The ID of the book\
        \ to delete.\n\nExample Response:\n{\n    \"message\": \"Book abc123 deleted\
        \ successfully\"\n}"
      operationId: delete_book_books__bookId__delete
      parameters:
      - in: path
        name: bookId
        required: true
        schema:
          title: Bookid
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Delete Book Books  Bookid  Delete
                type: object
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Book
      tags:
      - books
    get:
      description: "Retrieve details of a specific book.\n\nPath Parameter:\n- `bookId`:\
        \ The ID of the book to retrieve.\n\nExample Response:\n{\n    \"book\": {\n\
        \        \"bookId\": \"abc123\",\n        \"title\": \"The Great Gatsby\"\
        ,\n        \"author\": \"F. Scott Fitzgerald\",\n        \"genre\": \"Fiction\"\
        ,\n        \"price\": 15.99,\n        \"description\": \"A classic novel about\
        \ the American Dream.\",\n        \"stock\": 50,\n        \"rating\": 4.5\n\
        \    }\n}"
      operationId: retrieve_book_details_books__bookId__get
      parameters:
      - in: path
        name: bookId
        required: true
        schema:
          title: Bookid
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Retrieve Book Details Books  Bookid  Get
                type: object
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Retrieve Book Details
      tags:
      - books
    put:
      description: "Update details of a book.\n\nPath Parameter:\n- `bookId`: The\
        \ ID of the book to update.\n\nExample Request:\n{\n    \"title\": \"Updated\
        \ Title\",\n    \"price\": 18.99\n}"
      operationId: update_book_details_books__bookId__put
      parameters:
      - in: path
        name: bookId
        required: true
        schema:
          title: Bookid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              title: Updated Data
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Update Book Details Books  Bookid  Put
                type: object
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Update Book Details
      tags:
      - books
  /cart:
    get:
      description: "Retrieve the current contents of the shopping cart.\n\nExample\
        \ Response:\n{\n    \"items\": [\n        {\n            \"bookId\": \"abc123\"\
        ,\n            \"quantity\": 2\n        }\n    ],\n    \"totalPrice\": 31.98\n\
        }"
      operationId: retrieve_cart_cart_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Retrieve Cart
      tags:
      - cart
    post:
      description: "Add an item to the shopping cart.\n\nExample Request:\n{\n   \
        \ \"bookId\": \"abc123\",\n    \"quantity\": 2\n}"
      operationId: add_item_to_cart_cart_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Add Item To Cart
      tags:
      - cart
  /cart/{bookId}:
    delete:
      description: Remove a specific book from the cart for a specific user.
      operationId: remove_item_from_cart_cart__bookId__delete
      parameters:
      - in: path
        name: bookId
        required: true
        schema:
          title: Bookid
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Remove Item From Cart Cart  Bookid  Delete
                type: object
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Remove Item From Cart
      tags:
      - cart
  /login:
    post:
      description: Login user and return a JWT token.
      operationId: login_user_login_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_login_user_login_post'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Login User
      tags:
      - auth
  /logout:
    post:
      description: Logout the user by blacklisting their JWT token.
      operationId: logout_user_logout_post
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Logout User
      tags:
      - auth
  /orders:
    post:
      description: 'Create an order based on the user''s cart.


        This automatically clears the user''s cart after creating the order.'
      operationId: create_order_from_cart_orders_post
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Create Order From Cart Orders Post
                type: object
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Create Order From Cart
      tags:
      - orders
  /orders/{orderId}:
    get:
      description: Retrieve a specific order by orderId for the authenticated user.
      operationId: get_order_orders__orderId__get
      parameters:
      - in: path
        name: orderId
        required: true
        schema:
          title: Orderid
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Get Order Orders  Orderid  Get
                type: object
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Order
      tags:
      - orders
  /orders/{orderId}/place:
    post:
      description: Place an order for the authenticated user. This reduces the stock
        of books.
      operationId: place_order_orders__orderId__place_post
      parameters:
      - in: path
        name: orderId
        required: true
        schema:
          title: Orderid
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Place Order Orders  Orderid  Place Post
                type: object
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Place Order
      tags:
      - orders
  /profile:
    get:
      description: Retrieve the current logged-in user's information.
      operationId: get_current_user_profile_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Get Current User
      tags:
      - auth
  /register:
    post:
      description: Register a new user.
      operationId: register_user_register_post
      parameters:
      - in: query
        name: name
        required: true
        schema:
          title: Name
          type: string
      - in: query
        name: email
        required: true
        schema:
          title: Email
          type: string
      - in: query
        name: password
        required: true
        schema:
          title: Password
          type: string
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Register User
      tags:
      - auth
  /users:
    get:
      description: "Retrieve all users.\n\nExample Response:\n[\n    {\n        \"\
        userId\": \"123e4567-e89b-12d3-a456-426614174000\",\n        \"name\": \"\
        John Doe\",\n        \"email\": \"john.doe@example.com\"\n    },\n    {\n\
        \        \"userId\": \"789e4567-e89b-12d3-a456-426614174111\",\n        \"\
        name\": \"Jane Smith\",\n        \"email\": \"jane.smith@example.com\"\n \
        \   }\n]"
      operationId: get_all_users_users_get
      responses:
        '200':
          content:
            application/json:
              schema:
                items: {}
                title: Response Get All Users Users Get
                type: array
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Get All Users
      tags:
      - auth
  /users/{userId}:
    put:
      description: "Example Response:\n[{\n    \"userId\": \"123e4567-e89b-12d3-a456-426614174000\"\
        ,\n    \"name\": \"Updated Name\",\n    \"email\": \"updated.email@example.com\"\
        \n}]"
      operationId: update_user_users__userId__put
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          title: Userid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Update User Users  Userid  Put
                type: object
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Update User
      tags:
      - auth
